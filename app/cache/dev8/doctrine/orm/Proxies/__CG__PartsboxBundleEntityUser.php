<?php

namespace Proxies\__CG__\PartsboxBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \PartsboxBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'store', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'key', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'role', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'appkey', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'ts', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'status', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'actioneer', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'created', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'modified', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'id');
        }

        return array('__isInitialized__', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'store', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'key', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'role', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'appkey', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'ts', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'status', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'actioneer', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'created', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'modified', '' . "\0" . 'PartsboxBundle\\Entity\\User' . "\0" . 'id');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getField($field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getField', array($field));

        return parent::getField($field);
    }

    /**
     * {@inheritDoc}
     */
    public function setField($field, $val)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setField', array($field, $val));

        return parent::setField($field, $val);
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setStore($store)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStore', array($store));

        return parent::setStore($store);
    }

    /**
     * {@inheritDoc}
     */
    public function getStore()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStore', array());

        return parent::getStore();
    }

    /**
     * {@inheritDoc}
     */
    public function setKey($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKey', array($key));

        return parent::setKey($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKey', array());

        return parent::getKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', array($role));

        return parent::setRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', array());

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function setAppkey($appkey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAppkey', array($appkey));

        return parent::setAppkey($appkey);
    }

    /**
     * {@inheritDoc}
     */
    public function getAppkey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppkey', array());

        return parent::getAppkey();
    }

    /**
     * {@inheritDoc}
     */
    public function setTs($ts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTs', array($ts));

        return parent::setTs($ts);
    }

    /**
     * {@inheritDoc}
     */
    public function getTs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTs', array());

        return parent::getTs();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setActioneer($actioneer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActioneer', array($actioneer));

        return parent::setActioneer($actioneer);
    }

    /**
     * {@inheritDoc}
     */
    public function getActioneer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActioneer', array());

        return parent::getActioneer();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setModified($modified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModified', array($modified));

        return parent::setModified($modified);
    }

    /**
     * {@inheritDoc}
     */
    public function getModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModified', array());

        return parent::getModified();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

}
